package gen

import (
	"list"
	"strings"

	"github.com/hofstadter-io/hof/schema/gen"

	"github.com/hofstadter-io/supacode/schema"
)

// Generator definition
Generator: gen.Generator & {
	@gen(supacode)

	ModuleName: "github.com/hofstadter-io/supacode"

	// User inputs to this generator
	// -----------------------------

	// The server design conforming to the server schema
	Datamodel: schema.Datamodel
	App:       schema.App

	// Base output directory, defaults to current
	Outdir: string | *"./"

	// Required fields for hof
	// ------------------------

	// In is passed to every template
	In: {
		"App":       App
		"Datamodel": Datamodel

		// shorthand
		DM: Datamodel
	}

	Templates: [{
		// consider making these the default delims for this generator
		Delims: {LHS: "{%", RHS: "%}"}
	}, ...]

	// Actual files generated by hof, combined into a single list
	Out: [...gen.File] & _All

	_All: [
		for _, F in _OnceFiles {F},
		for _, F in _AuthFiles if App.auth.enabled {F},
		for _, F in _DatabaseFiles if App.database.enabled {F},
		for _, F in _DevopsFiles {F},

		for _, F in _ModelFiles {F},
		for _, F in _MDXPages {F},
		for _, F in _MDXDirs {F},
	]

	// Note, we can omit Templates, Partials, and Statics
	// since the default values are sufficient for us

	// Internal fields for mapping Input to templates
	// ----------------------------------------------

	// Files that are generated once per server
	_OnceFiles: [...gen.File] & [

		for f in [
			"package.json",
			"next.config.js",
			".env",

			"src/middleware.ts",

			"src/app/globals.css",
			"src/app/providers.tsx",
			"src/app/layout.tsx",
			"src/app/page.tsx",
			"src/app/error.tsx",
			"src/app/not-found.tsx",

		] {
			TemplatePath: f
			Filepath:     f
		},
	]

	// files generate if auth is enabled
	_AuthFiles: [...gen.File] & [

		for f in [
			// next-auth setup
			"types/next-auth.d.ts",
			"src/lib/auth/config.ts",
			"src/app/api/auth/[...nextauth]/route.ts",

			// custom pages
			"src/app/(auth)/account/page.tsx",
			"src/app/(auth)/signin/page.tsx",
			"src/app/(auth)/signup/page.tsx",

			// auth modals 
			"src/app/@authModal/default.tsx",
			"src/app/@authModal/(.)signin/page.tsx",
			"src/app/@authModal/(.)signup/page.tsx",

			// components
			"src/components/auth/oauth-button.tsx",
			"src/components/auth/signin.tsx",
			"src/components/auth/signup.tsx",
		] {
			TemplatePath: f
			Filepath:     f
		},
	]

	_DatabaseFiles: [...gen.File] & [

		for f in [
			"src/lib/db.ts",
			"prisma/schema.prisma",
		] {
			TemplatePath: f
			Filepath:     f
		},
	]

	_DevopsFiles: [...gen.File] & [

		for f in [
			"ci/dagger.mts",
			"ci/k8s/cuelm.cue",
			"ci/nginx/nginx.conf",
			"ci/nginx/server.conf.template",
		] {
			TemplatePath: f
			Filepath:     f
		},
	]

	// This is a pattern for defining multiple files per element during interation
	// we will produce a list of lists [models -> files], and need to flatten them
	_ModelFiles: [...gen.File] & list.FlattenN([ for m, M in Datamodel.Models {
		let lm = strings.ToLower(m)

		// apply an enrichment to each item in the file list
		// here we are providing a top-level "Model" value to the template input
		[...{In: Model: M}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/types/model.ts"
			Filepath:     "src/types/\(lm).ts"
		}, {
			TemplatePath: "src/app/page.tsx"
			Filepath:     "src/app/\(lm)/page.tsx"
		}, {
			TemplatePath: "src/app/route.ts"
			Filepath:     "src/app/api/\(lm)/route.ts"
		}]
	}], 1)

	// generate the initial skeleton for a MDX Content dir
	_MDXPages: [...gen.File] & list.FlattenN([ for p, P in App.mdxPages {
		[...{In: Page: P, PageName: p}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/mdx/page/layout.tsx"
			Filepath:     "src/app/\(p)/layout.tsx"
		}, {
			TemplatePath: "src/mdx/page/page-tree.ts"
			Filepath:     "src/app/\(p)/page-tree.ts"
		}, {
			TemplatePath: "src/mdx/page/page.tsx"
			Filepath:     "src/app/\(p)/page.tsx"
		}, {
			TemplatePath: "src/mdx/page/content.mdx"
			Filepath:     "src/app/\(p)/content.mdx"
		}, {
			TemplatePath: "src/mdx/page/section.mdx"
			Filepath:     "src/app/\(p)/section.mdx"
		}]
	}], 1)

	// generate the initial skeleton for a MDX Content dir
	_MDXDirs: [...gen.File] & list.FlattenN([ for d, D in App.mdxDirs {
		[...{In: Dir: D, DirName: d}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/mdx/remote/layout.tsx"
			Filepath:     "src/app/\(d)/layout.tsx"
		}, {
			TemplatePath: "src/mdx/remote/page-tree.ts"
			Filepath:     "src/app/\(d)/page-tree.ts"
		}, {
			Val: []
			Filepath: "src/app/\(d)/tree.json"
		}, {
			TemplatePath: "src/mdx/remote/page.tsx"
			Filepath:     "src/app/\(d)/page.tsx"
		}, {
			// this extra error page has a link specific to this section
			// when using mdx/dir with dynamic import of the mdx file for the meta data
			TemplatePath: "src/mdx/remote/slug-error.tsx"
			Filepath:     "src/app/\(d)/[...slug]/error.tsx"
		}, {
			TemplatePath: "src/mdx/remote/slug-page.tsx"
			Filepath:     "src/app/\(d)/[...slug]/page.tsx"
		}]
	}], 1)

	...
}
