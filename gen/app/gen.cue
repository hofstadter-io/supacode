package app

import (
	"list"
	"strings"

	"github.com/hofstadter-io/hof/schema/gen"

	"github.com/hofstadter-io/supacode/schema"
)

// Generator definition
Generator: gen.Generator & {
	ModuleName: "github.com/hofstadter-io/supacode"

	// User inputs to this generator
	// -----------------------------

	// The server design conforming to the server schema
	Datamodel: schema.Datamodel
	App:       schema.App

	// Base output directory, defaults to current
	Outdir: string | *"./"

	// Required fields for hof
	// ------------------------

	// In is passed to every template
	In: {
		"App":       App
		"Datamodel": Datamodel

		// shorthand
		DM: Datamodel
	}

	gen.TemplateSubdirs & {#subdir: "app"}
	Templates: [{
		DelimGlobs: {
			"**/*.tsx": {LHS: "{%", RHS: "%}"}
			"**/*.mdx": {LHS: "{%", RHS: "%}"}
		}
	}, ...]

	// Actual files generated by hof, combined into a single list
	Out: [...gen.File] & _All

	_All: [
		for _, F in _OnceFiles {F},
		for _, F in _ModelFiles {F},
		for _, F in _MDXPages {F},
		for _, F in _MDXDirs {F},
	]

	// Note, we can omit Templates, Partials, and Statics
	// since the default values are sufficient for us

	// Internal fields for mapping Input to templates
	// ----------------------------------------------

	// Files that are generated once per server
	_OnceFiles: [...gen.File] & [ {
		TemplatePath: "package.json"
		Filepath:     "package.json"
	}, {
		TemplatePath: "src/app/globals.css"
		Filepath:     "src/app/globals.css"
	}, {
		TemplatePath: "src/app/page.tsx"
		Filepath:     "src/app/page.tsx"
	}, {
		TemplatePath: "src/app/navbar.tsx"
		Filepath:     "src/app/navbar.tsx"
	}, {
		TemplatePath: "src/app/footer.tsx"
		Filepath:     "src/app/footer.tsx"
	}, {
		TemplatePath: "src/app/providers.tsx"
		Filepath:     "src/app/providers.tsx"
	}, {
		TemplatePath: "src/app/layout.tsx"
		Filepath:     "src/app/layout.tsx"
	}, {
		TemplatePath: "src/app/error.tsx"
		Filepath:     "src/app/error.tsx"
	}, {
		TemplatePath: "src/app/not-found.tsx"
		Filepath:     "src/app/not-found.tsx"
	}]

	// This is a pattern for defining multiple files per element during interation
	// we will produce a list of lists [models -> files], and need to flatten them
	_ModelFiles: [...gen.File] & list.FlattenN([ for m, M in Datamodel.Models {
		let lm = strings.ToLower(m)

		// apply an enrichment to each item in the file list
		// here we are providing a top-level "Model" value to the template input
		[...{In: Model: M}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/types/model.ts"
			Filepath:     "src/types/\(lm).ts"
		}, {
			TemplatePath: "src/app/page.tsx"
			Filepath:     "src/app/\(lm)/page.tsx"
		}, {
			TemplatePath: "src/app/route.ts"
			Filepath:     "src/app/api/\(lm)/route.ts"
		}]
	}], 1)

	// generate the initial skeleton for a MDX Content dir
	_MDXPages: [...gen.File] & list.FlattenN([ for p, P in App.MDXPages {
		[...{In: Page: P, PageName: p}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/mdx-page/layout.tsx"
			Filepath:     "src/app/\(p)/layout.tsx"
		}, {
			TemplatePath: "src/mdx-page/page.tsx"
			Filepath:     "src/app/\(p)/page.tsx"
		}, {
			TemplatePath: "src/mdx-page/content.mdx"
			Filepath:     "src/app/\(p)/content.mdx"
		}, {
			TemplatePath: "src/mdx-page/section.mdx"
			Filepath:     "src/app/\(p)/section.mdx"
		}]
	}], 1)

	// generate the initial skeleton for a MDX Content dir
	_MDXDirs: [...gen.File] & list.FlattenN([ for d, D in App.MDXDirs {
		[...{In: Dir: D, DirName: d}]// (CUE pattern)

		// the file list we produce for each model
		[{
			TemplatePath: "src/mdx-dir/layout.tsx"
			Filepath:     "src/app/\(d)/layout.tsx"
		}, {
			TemplatePath: "src/mdx-dir/page.tsx"
			Filepath:     "src/app/\(d)/page.tsx"
		}, {
			// this extra error page has a link specific to this section
			TemplatePath: "src/mdx-dir/slug-error.tsx"
			Filepath:     "src/app/\(d)/[slug]/error.tsx"
		}, {
			TemplatePath: "src/mdx-dir/slug-page.tsx"
			Filepath:     "src/app/\(d)/[slug]/page.tsx"
		}]
	}], 1)

	...
}
