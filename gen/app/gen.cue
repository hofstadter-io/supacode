package app

import (
	"github.com/hofstadter-io/hof/schema/gen"

	"github.com/hofstadter-io/supacode/schema"
)

// Generator definition
Generator: gen.Generator & {
	ModuleName: "github.com/hofstadter-io/supacode"

	// User inputs to this generator
	// -----------------------------

	// The server design conforming to the server schema
	Datamodel: schema.Datamodel
	App:       schema.App

	// Base output directory, defaults to current
	Outdir: string | *"./"

	// Required fields for hof
	// ------------------------

	// In is passed to every template
	In: {
		"App":       App
		"Datamodel": Datamodel

		// shorthand
		DM: Datamodel
	}

	gen.TemplateSubdirs & {#subdir: "app"}

	// Actual files generated by hof, combined into a single list
	Out: [...gen.File] & _All

	_All: [
		for _, F in _OnceFiles {F},
		for _, F in _ModelFiles {F},
	]

	// Note, we can omit Templates, Partials, and Statics
	// since the default values are sufficient for us

	// Internal fields for mapping Input to templates
	// ----------------------------------------------

	// Files that are generated once per server
	_OnceFiles: [...gen.File] & [
			//{
			//TemplatePath: "debug.txt"
			//Filepath:     "debug.txt"
			//},
			{
			TemplatePath: "package.json"
			Filepath:     "package.json"
		},
		{
			TemplatePath: "app/layout.tsx"
			Filepath:     "app/layout.tsx"
		},
	]

	_ModelFiles: [...gen.File] & [ for m, M in Datamodel.Models {
		// we can extend file context locally
		In: {
			Model: M
		}
		TemplatePath: "src/types/model.ts"
		Filepath:     "src/types/\(m).ts"
	}]
	...
}
