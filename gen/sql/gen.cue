package sql

import (
	"github.com/hofstadter-io/hof/schema/gen"

	"github.com/hofstadter-io/supacode/schema"
)

// Generator definition
Generator: gen.Generator & {
	ModuleName: "github.com/hofstadter-io/supacode"

	// User inputs to this generator
	// -----------------------------

	// The app data model & design conforming to schema
	Datamodel: schema.Datamodel
	App:       schema.App

	// Base output directory, defaults to current
	Outdir: string | *"./"

	// Required fields for hof
	// ------------------------

	// In is passed to every template as the root context
	In: {
		"App":       App
		"Datamodel": Datamodel

		// shorthand
		DM: Datamodel
	}

	gen.TemplateSubdirs & {#subdir: "sql"}

	// Actual files generated by hof, combined into a single list
	Out: [...gen.File] & _All

	_All: [
		for _, F in _OnceFiles {F},
		for _, F in _MigrationFiles {F},
	]

	// Note, we can omit Templates, Partials, and Statics
	// since the default values are sufficient for us

	// Internal fields for mapping Input to templates
	// ----------------------------------------------

	// Files that are generated once per server
	_OnceFiles: [...gen.File] & [
			{
			TemplatePath: "migration.sql"
			Filepath:     "supabase/migrations/latest.sql"
		},
	]

	_MigrationFiles: [...gen.File] & [ for _, S in In.DM.History {
		// we can extend file context locally
		In: {
			Snapshot: S
		}
		TemplatePath: "migration.sql"
		Filepath:     "supabase/migrations/\(S.Timestamp).sql"
	}]
	...
}
